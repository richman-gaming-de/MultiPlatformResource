name: Attach Release Assets

on:
  release:
    types: [created] # Dieser Workflow wird ausgelöst, wenn ein GitHub Release erstellt wird

jobs:
  build_and_attach_assets:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Erlaubt dem Workflow, Assets zu einem Release hinzuzufügen

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        # fetch-depth: 0 wird entfernt, da generate_release_notes nicht mehr verwendet wird
        # und der Standard-fetch-depth von 1 für diese Aufgabe ausreicht.

      # --- AltV Build und ZIP-Erstellung ---
      - name: Prepare AltV Release Directory
        run: |
          # Annahme: platformResourcePresets/altv/assets/stream/ existiert
          # Annahme: src/ existiert und ist nicht leer

          cp -r src/* platformResourcePresets/altv/assets/stream/

          echo "Content of platformResourcePresets/altv/assets/stream/ after copy:"
          ls -R platformResourcePresets/altv/assets/stream/
        shell: bash

      - name: Create AltV Release Archive (ZIP)
        id: create_altv_zip
        run: |
          REPO_NAME="${{ github.event.repository.name }}"
          ZIP_FILE_NAME="${REPO_NAME}-altv-${{ github.ref_name }}.zip"

          SOURCE_FOLDER_TO_ZIP="platformResourcePresets/altv/"

          echo "Creating ZIP archive for: $SOURCE_FOLDER_TO_ZIP"
          echo "ZIP file will be named: $ZIP_FILE_NAME"
          echo "Top-level folder inside ZIP will be: $REPO_NAME/"
          
          cd "$SOURCE_FOLDER_TO_ZIP"
          mkdir -p "../../${REPO_NAME}"
          rm -rf ../../${REPO_NAME}/*
          cp -r * "../../${REPO_NAME}"
          cd ../../
          zip -r "$ZIP_FILE_NAME" "$REPO_NAME"/
          echo "Successfully created ZIP: $ZIP_FILE_NAME"
          ls -l "$ZIP_FILE_NAME"

          # Exportiere den ZIP-Dateinamen als Output dieses Schrittes
          echo "ALT_ZIP_FILE_NAME=$ZIP_FILE_NAME" >> "$GITHUB_OUTPUT"

        shell: bash

      # --- FiveM Build und ZIP-Erstellung ---
      - name: Prepare FiveM Release Directory
        run: |
          # Annahme: platformResourcePresets/fiveM/stream/ existiert
          # Annahme: src/ existiert und ist nicht leer

          cp -r src/* platformResourcePresets/fiveM/stream/

          echo "Content of platformResourcePresets/fiveM/stream/ after copy:"
          ls -R platformResourcePresets/fiveM/stream/
        shell: bash

      - name: Create FiveM Release Archive (ZIP)
        id: create_fivem_zip
        run: |
          REPO_NAME="${{ github.event.repository.name }}"
          ZIP_FILE_NAME="${REPO_NAME}-fivem-${{ github.ref_name }}.zip"

          SOURCE_FOLDER_TO_ZIP="platformResourcePresets/fiveM/"

          echo "Creating ZIP archive for: $SOURCE_FOLDER_TO_ZIP"
          echo "ZIP file will be named: $ZIP_FILE_NAME"
          echo "Top-level folder inside ZIP will be: $REPO_NAME/"
          
          cd "$SOURCE_FOLDER_TO_ZIP"
          mkdir -p "../../${REPO_NAME}"
          rm -rf ../../${REPO_NAME}/*
          cp -r * "../../${REPO_NAME}"
          cd ../../
          zip -r "$ZIP_FILE_NAME" "$REPO_NAME"/
          echo "Successfully created ZIP: $ZIP_FILE_NAME"
          ls -l "$ZIP_FILE_NAME"

          # Exportiere den ZIP-Dateinamen als Output dieses Schrittes
          echo "FIVEM_ZIP_FILE_NAME=$ZIP_FILE_NAME" >> "$GITHUB_OUTPUT"

        shell: bash

      - name: Upload Release Assets to Existing Release
        uses: softprops/action-gh-release@v2
        with:
          id: ${{ github.event.release.id }}
          files: |
            ${{ steps.create_altv_zip.outputs.ALT_ZIP_FILE_NAME }}
            ${{ steps.create_fivem_zip.outputs.FIVEM_ZIP_FILE_NAME }}
