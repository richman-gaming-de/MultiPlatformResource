name: Release
on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+' # Trigger bei Tags wie v1.0.0, v1.2.3

jobs:
  release:
    runs-on: [ self-hosted, richman-gaming ]
    permissions:
      contents: write # Wichtig: Erlaubt dem Workflow, Releases zu erstellen und Tags zu pushen

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # fetch-depth: 0 ist gut, wenn generate_release_notes: true verwendet wird,
          # da es den gesamten Git-Verlauf für die Commit-Analyse holt.
          fetch-depth: 0

      - name: Prepare AltV Release Directory
        run: |
          # Inhalt von src/ in das Zielverzeichnis kopieren
          # Der Stern '*' stellt sicher, dass NUR der Inhalt von src/ kopiert wird,
          # nicht der src/-Ordner selbst in assets/stream/
          cp -r src/* platformResourcePresets/altv/assets/stream/

          # Optional: Debugging - Zeigt den Inhalt des vorbereiteten Ordners
          echo "Content of platformResourcePresets/altv/assets/stream/ after copy:"
          ls -R platformResourcePresets/altv/assets/stream/
        shell: bash # Sicherstellen, dass Bash für cp/mkdir verwendet wird, besonders wichtig auf Windows-Runnern

      - name: Create AltV Release Archive (ZIP) # Schritt zum Erstellen der ZIP-Datei
        run: |
          # Den gewünschten Namen für den obersten Ordner in der ZIP-Datei festlegen (Repository-Name)
          REPO_NAME="${{ github.event.repository.name }}"
          ZIP_FILE_NAME="${REPO_NAME}-${{ github.ref_name }}.zip" # Benenne die ZIP-Datei dynamisch

          SOURCE_FOLDER_TO_ZIP="platformResourcePresets/altv/" # Der Ordner, dessen INHALT wir zippen wollen

          echo "Creating ZIP archive for: $SOURCE_FOLDER_TO_ZIP"
          echo "ZIP file will be named: $ZIP_FILE_NAME"
          echo "Top-level folder inside ZIP will be: $REPO_NAME/"

          # Gehe in das Quellverzeichnis (platformResourcePresets/altv/)
          # Das ist notwendig, um den INHALT dieses Ordners zu zippen,
          # ohne dass der Ordnername 'altv/' selbst die Wurzel der ZIP-Datei bildet.
          cd "$SOURCE_FOLDER_TO_ZIP"

          # Zippe den gesamten Inhalt des aktuellen Verzeichnisses in eine neue ZIP-Datei.
          # Option '-r' für rekursiv. Option '-j' (junk paths) wird NICHT verwendet,
          # da wir einen neuen Root-Ordnernamen wollen.
          # Stattdessen nutzen wir die '-m' Option von zip (move) oder manuelles Erstellen.

          # Besserer Ansatz: Temporäres Verzeichnis erstellen, umbenennen und dann zippen
          # 1. Erstelle ein temporäres Verzeichnis im Workflow-Root
          mkdir -p "../../${REPO_NAME}"
          
          # 2. Kopiere den Inhalt von 'altv/' in das temporäre Verzeichnis
          # Der Stern '*' kopiert nur den Inhalt, nicht den 'altv/' Ordner selbst
          cp -r * "../../${REPO_NAME}"

          # 3. Wechsle zurück ins Root-Verzeichnis des Workflows
          cd ../../

          # 4. Zippe das umbenannte temporäre Verzeichnis
          zip -r "$ZIP_FILE_NAME" "$REPO_NAME"/
          
          echo "Successfully created ZIP: $ZIP_FILE_NAME"
          # Debugging: Zeige die erstellte ZIP-Datei im Root-Verzeichnis des Workflows
          ls -l "$ZIP_FILE_NAME"
          # Optional: Temporäres Verzeichnis aufräumen
          rm -rf "$REPO_NAME"

        shell: bash

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          tag_name: ${{ github.ref_name }}-assets
          name: Release ${{ github.ref_name }} (Build Assets)
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            ${{ github.event.repository.name }}-${{ github.ref_name }}.zip
